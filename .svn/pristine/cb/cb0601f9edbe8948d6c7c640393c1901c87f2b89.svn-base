using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using FinalGame.Classes.Items;
using FinalGame.Classes.Monster;
using System.ComponentModel;

namespace FinalGame.Classes.Monster
{
    public class Monster : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        private int _HP;
        private int _maxHP;
        //static int NUM_OF_TYPES = 3;
        public static int BASE_DEXTERITY = 3;
        public static int BASE_INTELLECT = 3;
        public static int BASE_STRENGTH = 3;
        Random rGen = new Random();
        
        bool isAlive = true;
        public int maxHP
        {
            get { return _maxHP; }
            set
            {
                _maxHP = value;

                if (PropertyChanged != null)
                    PropertyChanged(this, new PropertyChangedEventArgs("maxHP"));
            }
        }
        public int hp
        {
            get { return _HP; }
            set
            {
                _HP = value;

                if(PropertyChanged != null)
                    PropertyChanged(this, new PropertyChangedEventArgs("hp"));
            } 
        }

        public string type;
        public int damage;
        public int experience;
        public int strength;
        public int intellect;
        public int dexterity;
        public int Level;

        public Monster() { }

        public Item getDrop()
        {
            Classes.Items.Type itemType = (Classes.Items.Type)((Level % 12) / 2 + ((Level % 12) % 2) + ((Level%12==0)?6:0));
            int grade=0;    
            for(int i = 0;i<Level ;i+=12)
               grade = i/12;
            
            Item itemToDrop = null;
            switch (rGen.Next(1, 5))
            {
                case 1:
                    itemToDrop = new Consumable(grade, itemType, "A " + itemType + "+" + grade + " health potion! Enjoy it!", (grade == 0 ? "" : "+" + grade + " ") + itemType + " health potion");
                    break;
                case 2:
                    itemToDrop = new Armor(itemType, grade, "Some " + itemType + "+" + grade + " armor! Enjoy it!", (grade == 0 ? "" : "+" + grade + " ") + itemType + " armor") ;
                    break;
                case 3:
                    WeaponType wepType = (Classes.Items.WeaponType)rGen.Next(1, 4);
                    itemToDrop = new Weapon(itemType, wepType, grade, "A " + itemType + "+" + grade + " " + wepType + "! Enjoy it!", (grade == 0 ? "" : "+" + grade + " ") + itemType + " " + wepType); 
                    break;
                case 4:
                    itemToDrop = new Consumable(grade, itemType, "A " + itemType + "+" + grade + " health potion! Enjoy it!", (grade == 0 ? "" : "+" + grade + " ") + itemType + " health potion");
                    break;
            }
            return itemToDrop;
        }

        //method to make monster take damage. if it takes lethal damage, it returns true. else it returns false.
        public bool takeDamage(int dmg)
        {
            hp -= dmg;
            if (hp <= 0) 
                isAlive = false;

            return !isAlive;
        }

    }
}
